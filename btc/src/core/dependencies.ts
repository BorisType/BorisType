import { promises as fs } from 'fs';
import * as path from 'path';
import { randomUUID } from 'crypto';

// –ö–ª–∞—Å—Å –¥–ª—è —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
export class DependencyNode {
  constructor(public packageJson: { name: string; version: string }, projectPath: string = '') {
    this.name = packageJson.name;
    this.version = packageJson.version;
    this.dependencies = [];
    this.projectPath = projectPath;
    this.hash = randomUUID();
  }

  name: string;
  version: string;
  dependencies: DependencyNode[];
  projectPath: string;
  hash: string;
}

export async function getCompilerRequiredDependencies(projectPath: string): Promise<DependencyNode[]> {
  const rootPackageJsonPath = path.join(projectPath, 'package.json');
  const nodeModulesPath = path.join(projectPath, 'node_modules');

  const rootPackageJson = JSON.parse(await fs.readFile(rootPackageJsonPath, 'utf-8'));
  
  const devDependencies = rootPackageJson.devDependencies || {};
  const btcRemoteDependency = devDependencies['@boristype/btc'] !== undefined;
  const btcLocalDependency = devDependencies['btc'] !== undefined;

  if (!btcLocalDependency && !btcRemoteDependency) {
    console.warn(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í devDependencies –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å 'btc'.`);
    return [];
  }

  const btcPath = btcRemoteDependency ? path.join(nodeModulesPath, '@boristype', 'btc') : path.join(nodeModulesPath, 'btc');
  const btcPackageJsonPath = path.join(btcPath, 'package.json');
  const btcPackageJson = JSON.parse(await fs.readFile(btcPackageJsonPath, 'utf-8'));

  const btcDependencies = btcPackageJson.dependencies || {};

  const result: DependencyNode[] = [];

  for (const [depName, depVersion] of Object.entries(btcDependencies)) {
    // console.log(`–¢—Ä–µ–±—É–µ–º–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞: ${depName}@${depVersion}`);

    if (depName.startsWith('@boristype/')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π BorisType

      // –ï—Å–ª–∏ btc —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –∏—â–µ–º –≤ node_modules –ø—Ä–æ–µ–∫—Ç–∞
      // –ï—Å–ª–∏ btc —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (file:...), –∏—â–µ–º –≤ node_modules –≤–Ω—É—Ç—Ä–∏ btc
      const btcNodeModulesPath = btcRemoteDependency ? nodeModulesPath : path.join(btcPath, 'node_modules');
      const depPath = path.join(btcNodeModulesPath, depName);

      try {
        const depPackageJsonPath = path.join(depPath, 'package.json');
        const depPackageJson = JSON.parse(await fs.readFile(depPackageJsonPath, 'utf-8'));

        // console.log(`  –ù–∞–π–¥–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å BorisType: ${depName}@${depPackageJson.version}`);

        const depNode = new DependencyNode(depPackageJson, depPath);
        result.push(depNode);
      } catch (err) {
        if (err instanceof Error) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${depName}: ${err.message}`);
        } else {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${depName}: ${String(err)}`);
        }
      }
    }
  }

  return result;
}

export async function buildDependencyTree(projectPath: string) {
  const rootPackageJsonPath = path.join(projectPath, 'package.json');
  const nodeModulesPath = path.join(projectPath, 'node_modules');

  const rootPackageJson = JSON.parse(await fs.readFile(rootPackageJsonPath, 'utf-8'));
  const rootNode = new DependencyNode(rootPackageJson, projectPath);

  const processedModules = new Map<string, DependencyNode>();

  async function processDependencies(
    parentNode: DependencyNode,
    nodeModulesDir: string,
    packageJsonPath: string,
    visited = new Set<string>()
  ) {
    let dependencies: Record<string, string> = {};

    try {
      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));
      dependencies = packageJson.dependencies || {};
    } catch (err) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json –¥–ª—è ${parentNode.name}: ${packageJsonPath}`);
      return;
    }

    for (const [depName, depVersion] of Object.entries(dependencies)) {
      const depKey = `${depName}@${depVersion}`;

      if (visited.has(depKey)) {
        console.warn(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${depKey}`);
        continue;
      }

      const depPath = path.join(nodeModulesDir, depName);

      try {
        const depPackageJsonPath = path.join(depPath, 'package.json');
        const depPackageJson = JSON.parse(await fs.readFile(depPackageJsonPath, 'utf-8'));

        const processedKey = `${depPackageJson.name}@${depPackageJson.version}`;

        let depNode: DependencyNode;

        if (processedModules.has(processedKey)) {
          depNode = processedModules.get(processedKey)!;
        } else {
          depNode = new DependencyNode(depPackageJson, depPath);
          processedModules.set(processedKey, depNode);

          const newVisited = new Set(visited);
          newVisited.add(depKey);

          await processDependencies(depNode, nodeModulesDir, depPackageJsonPath, newVisited);
        }

        parentNode.dependencies.push(depNode);
      } catch (err) {
        if (err instanceof Error) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${depName}: ${err.message}`);
        } else {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${depName}: ${String(err)}`);
        }
      }
    }
  }

  await processDependencies(rootNode, nodeModulesPath, rootPackageJsonPath);
  return rootNode;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤)
export function flattenDependencyTreeIterative(rootNode: DependencyNode): DependencyNode[] {
  const visited = new Set<string>();
  const result: DependencyNode[] = [];
  const stack: { node: DependencyNode; path: Set<string> }[] = [];

  stack.push({ node: rootNode, path: new Set() });

  while (stack.length > 0) {
    const { node, path } = stack.pop()!;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if (path.has(node.hash)) {
      console.warn(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${node.name}@${node.version}`);
      continue;
    }

    // –ï—Å–ª–∏ —É–∑–µ–ª —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (visited.has(node.hash)) {
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    const unprocessedDeps = node.dependencies.filter(dep => !visited.has(dep.hash));

    if (unprocessedDeps.length === 0) {
      // –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
      visited.add(node.hash);
      result.push(node);
    } else {
      // –ï—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      stack.push({ node, path });

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Å—Ç–µ–∫
      const newPath = new Set(path);
      newPath.add(node.hash);

      for (const dep of unprocessedDeps) {
        if (!path.has(dep.hash)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤
          stack.push({ node: dep, path: newPath });
        }
      }
    }
  }

  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
export function printDependencyTree(node: DependencyNode, depth = 0) {
  console.log('\nüì¶ –î–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
  console.log('='.repeat(50));
  console.log(`${' '.repeat(depth * 2)}${node.name}@${node.version}  [${node.hash}]`);
  for (const dep of node.dependencies) {
    printDependencyTree(dep, depth + 1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–ª–æ—Å–∫–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
export function printFlattenedTree(flatTree: DependencyNode[]) {
  console.log('\nüì¶ –ü–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏):');
  console.log('='.repeat(50));
  flatTree.forEach((node, index) => {
    console.log(`${(index + 1).toString().padStart(2)}. ${node.name}@${node.version}  [${node.hash}]`);
  });
}

export function extractBorisTypeDependencies(flatTree: DependencyNode[]): DependencyNode[] {
  return flatTree.filter(node => {
    const wsRoot = (node.packageJson as any)['ws:root'] as string;
    const wsApiext = (node.packageJson as any)['ws:apiext'] as any;
    return typeof wsRoot === 'string' && typeof wsApiext === 'object' && Array.isArray(wsApiext.libs)
  });
}